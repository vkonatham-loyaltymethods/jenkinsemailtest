#!groovy

pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }
  environment {
     NEXUS_USERNAME = credentials('NEXUS_USERNAME')
     NEXUS_PASSWORD = credentials('NEXUS_PASSWORD')
     GIT_USERNAME = credentials('GIT_USERNAME')
     GIT_PASSWORD = credentials('GIT_PASSWORD')
  }
  agent any
  stages {
    stage('Build') {
      parallel {
        stage('AMD64 Build') {
          agent {label 'primary-slave'}
          steps {
            script {
              /* sh '''
                SBI/build.sh
              ''' */
              echo "testing"
            }
          }
        }
        stage('ARM64 Build') {
          agent {label 'arm64-slave'}
          steps {
            script {
              /* sh '''
                SBI/build.sh
              ''' */
              echo "testing2"
            }
          }
        }
      }
    }
    stage('Test') {
      parallel {
        stage('AMD64 Test') {
          agent {label 'primary-slave'}
          steps {
            script {
              /* sh '''
                SBI/test.sh
              ''' */
              echo "testing3"
            }
          }
        }
        stage('ARM64 Test') {
          agent {label 'arm64-slave'}
          steps {
            script {
              /*sh '''
                SBI/test.sh
              '''*/
              echo "testing4"
            }
          }
        }
      }
    }
    stage('Checkstyle') {
      steps {
        step([$class: 'CheckStylePublisher',
          canRunOnFailed: true,
          defaultEncoding: '',
          pattern: '**/checkstyle-*.xml',
          healthy: '',
          unHealthy: '',
          useStableBuildAsReference: true
        ])
      }
    }
    stage('Jacoco') {
      when {
        expression {
          fileExists("target/site/cobertura/coverage.xml") ||  \
          fileExists("target/site/cobertura/digital-coverage.xml")
        }
      }
      steps {
        step([$class: 'CoberturaPublisher',
          autoUpdateHealth: false,
          autoUpdateStability: false,
          coberturaReportFile: 'target/site/cobertura/*.xml',
          failUnhealthy: false,
          failUnstable: false,
          maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII',
          zoomCoverageChart: false
        ])
      }
    }
    stage('Container Build') {
      when {
        environment name: 'CHANGE_ID', value: ''
        expression {
          fileExists("SBI/dockerize.sh")
        }
      }
      parallel {
        stage('AMD64 Container Image Build') {
          agent {label 'primary-slave'}
          steps {
            script {
              /*sh '''
                SBI/dockerize.sh
              '''*/
              echo "testing6"
            }
          }
        }
        stage('ARM64 Container Image Build') {
          agent {label 'arm64-slave'}
          steps {
            script {
              /*sh '''
                #SBI/dockerize.sh
              '''*/
              sh '''exit 1'''
            }
          }
        }
      }
    }
  }
  post {
        always {
            script {
                currentBuild.result = currentBuild.currentResult
                    processBuildFailLog()
            }
        }
        success {
            script {
                handleScanStatusSuccess()
            }
        }
        fixed {
            script {
                sendEmailOnBuildFixed()
            }
        }
        failure {
            script {
                handleBuildFailure()
            }
        }
        unstable {
            script {
                sendEmailOnUnstablePipeline()
            }
        }
    }
}
// Function to process build_fail.log
def processBuildFailLog() {
    sh '''
          if  [ -f build_fail.log ];then
            tail -50 build_fail.log  >> build_fail.txt && rm -f build_fail.log && mv build_fail.txt build_fail.log && \
            rm -f build_fail.log-txt* && unix2dos -f build_fail.log
          fi
       '''
}

// Function to handle scan status success
def handleScanStatusSuccess() {
    if (fileExists('scan_status.log')) {
        env.SCAN_STATUS = readFile('scan_status.log').trim()
        if (env.SCAN_STATUS == 'fail') {
            sendEmailOnScanFailure()
        }
    }
}

// Function to send email on build fixed
def sendEmailOnBuildFixed() {
    emailext(attachLog: true, body: "${currentBuild.result}: ${BUILD_URL}", compressLog: true,
        subject: "Jenkins build back to normal: ${currentBuild.fullDisplayName}",
        recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
        to: getRecipientEmail())
}

// Function to handle build failure
def handleBuildFailure() {
    if (fileExists('build_fail.log')) {
        sendEmailOnBuildFailure('build_fail.log')
    } else {
        sendEmailOnBuildFailure(null)
    }
}

// Function to send email on unstable pipeline
def sendEmailOnUnstablePipeline() {
    emailext(attachLog: true, body: "${currentBuild.result}: ${BUILD_URL}", compressLog: true,
        subject: "Unstable Pipeline: ${currentBuild.fullDisplayName}",
        recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
        to: getRecipientEmail())
}

// Function to send email on scan failure
def sendEmailOnScanFailure() {
    emailext(attachmentsPattern: 'scan_report.log',
        attachLog: true,
        body: "${currentBuild.result}: ${BUILD_URL}",
        subject: "Build failed in Jenkins due to image scan failure: ${currentBuild.fullDisplayName}",
        to: getRecipientEmail())
}

// Function to send email on build failure
def sendEmailOnBuildFailure(attachment) {
    emailext(attachmentsPattern: attachment,
        attachLog: true,
        body: "${currentBuild.result}: ${BUILD_URL}",
        subject: "Build failed in Jenkins: ${currentBuild.fullDisplayName}",
        to: getRecipientEmail())
}

def getViewNameForJob(jobName) {
    def jobNameParts = jobName.split('/')

    // Iterate through top-level views
    for (view in Jenkins.instance.views) {
        if (view instanceof ListView && view.items.find { it.name in jobNameParts }) {
            return view.name
        } else if (view instanceof hudson.plugins.nested_view.NestedView) {
            // Iterate through nested views
            def nestedViews = view.getViews()
            for (nestedView in nestedViews) {
                if (nestedView.items.find { it.name in jobNameParts }) {
                    return nestedView.name
                }
            }
        }
    }
    // If no matching view is found, return null
    return null
}

def printJobAndView(jobName, parentView, nestedView = null) {
    if (nestedView != null) {
        println("Job Name: ${jobName}, View: ${parentView}, Nested View: ${nestedView}")
    } else {
        println("Job Name: ${jobName}, View: ${parentView}")
    }
}

// Function to get recipient email based on branch name
def getRecipientEmail() {
    def jobName = env.JOB_NAME
    echo "JOB_NAME : ${env.JOB_NAME}"
    echo "BRANCH_NAME: ${env.BRANCH_NAME}"
    def viewName = getViewNameForJob(jobName)
    echo "VIEW_NAME: ${viewName}"
    if (env.BRANCH_NAME ==~ /^PR-.*/) {
        return env.CHANGE_AUTHOR_EMAIL
    } else if ((env.BRANCH_NAME == 'develop' || env.BRANCH_NAME ==~ /^feature-.*/ || env.BRANCH_NAME ==~ /^bug-.*/ || env.BRANCH_NAME ==~ /^hotfix-.*/) && ("Java".equals(viewName) || "Models".equals(viewName) || "Clients".equals(viewName) || "JavaOngoing".equals(viewName))){
        return 'rcxjavaoffshore@loyaltymethods.com,rcx-devops@loyaltymethods.com'
    }
      else if ((env.BRANCH_NAME == 'develop' || env.BRANCH_NAME ==~ /^feature-.*/ || env.BRANCH_NAME ==~ /^bug-.*/ || env.BRANCH_NAME ==~ /^hotfix-.*/) && ("Nodejs".equals(viewName) || "CoreOngoing".equals(viewName))){
      return 'rcxcoreteam@loyaltymethods.com,rcx-devops@loyaltymethods.com'
    }
      else if ((env.BRANCH_NAME == 'develop' || env.BRANCH_NAME ==~ /^feature-.*/ || env.BRANCH_NAME ==~ /^bug-.*/ || env.BRANCH_NAME ==~ /^hotfix-.*/) && ("BI".equals(viewName)) ){
      return 'data-dev@loyaltymethods.com,RCX-Data-QA@loyaltymethods.com,rcx-devops@loyaltymethods.com'
    }
      else if ((env.BRANCH_NAME == 'develop'|| env.BRANCH_NAME ==~ /^feature-.*/ || env.BRANCH_NAME ==~ /^bug-.*/ || env.BRANCH_NAME ==~ /^hotfix-.*/) && ("QA".equals(viewName))){
      return 'RCX-QA-Offshore@loyaltymethods.com,rcx-devops@loyaltymethods.com'
    }
      else if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'qa') {
        return 'RCXHydTeam@loyaltymethods.com'
    } else {
        return 'rcx-devops@loyaltymethods.com'
    }
}